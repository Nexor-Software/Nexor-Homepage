[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.13.4","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":\"::\",\"port\":8080,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{\"/\":\"/de\",\"/about\":\"/de/about\",\"/services\":\"/de/services\",\"/blog\":\"/de/blog\",\"/portfolio\":\"/de/portfolio\",\"/contact\":\"/de/contact\",\"/privacy-policy\":\"/de/privacy-policy\",\"/terms-of-service\":\"/de/terms-of-service\"},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"i18n\":{\"defaultLocale\":\"de\",\"locales\":[\"de\",\"en\"],\"routing\":{\"prefixDefaultLocale\":true,\"redirectToDefaultLocale\":true,\"fallbackType\":\"redirect\"}},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false},\"legacy\":{\"collections\":false}}","content-config-digest","f89a9e3f1e30b9d9","blog",["Map",11,12,28,29,42,43,57,58,66,67,73,74,80,81,87,88,94,95,108,109,120,121,133,134],"future-web-development",{"id":11,"data":13,"body":23,"filePath":24,"digest":25,"legacyId":26,"deferredRender":27},{"title":14,"description":15,"pubDate":16,"author":17,"tags":18,"image":22},"Die Zukunft der Webentwicklung","Ein Blick auf die neuesten Trends und Technologien in der Webentwicklung.",["Date","2025-01-20T00:00:00.000Z"],"Nexor Team",[19,20,21],"Webentwicklung","Trends","Technologie","/nexor-logo.svg","# Die Zukunft der Webentwicklung\n\nDie Webentwicklung entwickelt sich rasant weiter. Hier sind einige Trends, die wir für 2025 und darüber hinaus erwarten.\n\n## React Server Components\n\nServer Components revolutionieren die Art und Weise, wie wir React-Anwendungen bauen. Sie ermöglichen es, Komponenten serverseitig zu rendern und nur die notwendigen Daten an den Client zu senden.\n\n```jsx\n// Beispiel für Server Components\nexport default function BlogPost({ post }) {\n\treturn (\n\t\t\u003Carticle>\n\t\t\t\u003Ch1>{post.title}\u003C/h1>\n\t\t\t\u003Cp>{post.content}\u003C/p>\n\t\t\u003C/article>\n\t);\n}\n```\n\n## Edge Computing\n\nEdge Computing bringt die Datenverarbeitung näher an den Nutzer heran. Das bedeutet schnellere Ladezeiten und bessere Performance für globale Anwendungen.\n\n## AI-gestützte Entwicklung\n\nKünstliche Intelligenz wird die Entwicklung vereinfachen und beschleunigen. Von Code-Generierung bis hin zu automatisiertem Testing - AI wird ein unverzichtbarer Partner für Entwickler.\n\n## Unsere Herangehensweise\n\nBei Nexor Software bleiben wir immer am Puls der Zeit und integrieren die neuesten Technologien in unsere Projekte, um unseren Kunden die besten Lösungen zu bieten.\n\n---\n\n_Interessiert an einer Zusammenarbeit? [Lassen Sie uns sprechen!](/contact)_","src/content/blog/future-web-development.mdx","04af6facae6ec338","future-web-development.mdx",true,"welcome",{"id":28,"data":30,"body":38,"filePath":39,"digest":40,"legacyId":41,"deferredRender":27},{"title":31,"description":32,"pubDate":33,"author":17,"tags":34,"image":37},"Willkommen bei Nexor Software","Erfahren Sie mehr über unsere Mission und Vision für innovative Softwarelösungen.",["Date","2025-01-15T00:00:00.000Z"],[35,36],"Einführung","Unternehmen","/nexor-logo-large.png","# Willkommen bei Nexor Software\n\nWillkommen auf unserem neuen Blog! Hier teilen wir regelmäßig Updates zu unseren neuesten Projekten, Technologien und Einblicke in die Welt der Softwareentwicklung.\n\n## Unsere Mission\n\nBei Nexor Software glauben wir daran, dass jedes Unternehmen Zugang zu innovativen Softwarelösungen haben sollte, die Wachstum und Effizienz fördern.\n\n## Was Sie erwartet\n\n- **Projekt-Updates**: Einblicke in unsere aktuellen Entwicklungen\n- **Technologie-Trends**: Die neuesten Entwicklungen in der Software-Branche\n- **Best Practices**: Tipps und Tricks für erfolgreiche Softwareprojekte\n- **Team-Insights**: Hinter den Kulissen bei Nexor Software\n\nBleiben Sie dran für spannende Inhalte!\n\n---\n\n_Haben Sie Fragen oder Anregungen? Kontaktieren Sie uns gerne über unser [Kontaktformular](/contact)._","src/content/blog/welcome.mdx","3c3ec5c2ba796bc2","welcome.mdx","react-best-practices-2025",{"id":42,"data":44,"body":53,"filePath":54,"digest":55,"legacyId":56,"deferredRender":27},{"title":45,"description":46,"pubDate":47,"author":17,"tags":48,"image":22},"React Best Practices 2025","Moderne Entwicklungsmuster und bewährte Praktiken für React-Anwendungen.",["Date","2025-01-25T00:00:00.000Z"],[49,50,51,52],"React","Best Practices","JavaScript","Frontend","# React Best Practices 2025\n\nReact hat sich in den letzten Jahren enorm weiterentwickelt. Hier sind die wichtigsten Best Practices für 2025.\n\n## Hooks richtig einsetzen\n\nHooks haben die Art und Weise, wie wir React-Komponenten schreiben, revolutioniert. Aber es gibt einige wichtige Regeln zu beachten:\n\n### 1. Hooks nur auf oberster Ebene verwenden\n\n```jsx\n// ✅ Richtig\nfunction MyComponent() {\n\tconst [count, setCount] = useState(0);\n\t// ...\n}\n\n// ❌ Falsch\nfunction MyComponent() {\n\tif (condition) {\n\t\tconst [count, setCount] = useState(0);\n\t}\n}\n```\n\n### 2. Custom Hooks für wiederverwendbare Logik\n\n```jsx\nfunction useLocalStorage(key, initialValue) {\n\tconst [storedValue, setStoredValue] = useState(() => {\n\t\ttry {\n\t\t\treturn JSON.parse(localStorage.getItem(key)) || initialValue;\n\t\t} catch {\n\t\t\treturn initialValue;\n\t\t}\n\t});\n\n\tconst setValue = (value) => {\n\t\tsetStoredValue(value);\n\t\tlocalStorage.setItem(key, JSON.stringify(value));\n\t};\n\n\treturn [storedValue, setValue];\n}\n```\n\n## Performance-Optimierung\n\n### React.memo für teure Komponenten\n\n```jsx\nconst ExpensiveComponent = React.memo(({ data }) => {\n\treturn (\n\t\t\u003Cdiv>\n\t\t\t{data.map((item) => (\n\t\t\t\t\u003CHeavyCalculation key={item.id} item={item} />\n\t\t\t))}\n\t\t\u003C/div>\n\t);\n});\n```\n\n### useMemo und useCallback richtig einsetzen\n\n```jsx\nconst memoizedValue = useMemo(() => {\n\treturn expensiveCalculation(a, b);\n}, [a, b]);\n\nconst memoizedCallback = useCallback(() => {\n\tdoSomething(a, b);\n}, [a, b]);\n```\n\n## Testing\n\nUnit-Tests sind wichtiger denn je. Verwenden Sie React Testing Library für komponentenbasierte Tests:\n\n```jsx\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport Counter from './Counter';\n\ntest('increments counter', () => {\n\trender(\u003CCounter />);\n\tconst button = screen.getByText('Increment');\n\tfireEvent.click(button);\n\texpect(screen.getByText('Count: 1')).toBeInTheDocument();\n});\n```\n\n## Fazit\n\nDiese Best Practices helfen Ihnen, wartbare, performante und skalierbare React-Anwendungen zu entwickeln. Bleiben Sie neugierig und experimentieren Sie mit neuen Features!\n\n---\n\n_Haben Sie Fragen zu React oder brauchen Sie Hilfe bei Ihrem nächsten Projekt? [Kontaktieren Sie uns!](/contact)_","src/content/blog/react-best-practices-2025.mdx","3515e99f5a857e88","react-best-practices-2025.mdx","new-blog",{"id":57,"data":59,"body":53,"filePath":63,"digest":64,"legacyId":65,"deferredRender":27},{"title":60,"description":46,"pubDate":61,"author":17,"tags":62,"image":22},"Test",["Date","2025-01-25T00:00:00.000Z"],[49,50,51,52],"src/content/blog/new-blog.mdx","ce9179d0287564fa","new-blog.mdx","de/new-blog",{"id":66,"data":68,"body":53,"filePath":71,"digest":64,"legacyId":72,"deferredRender":27},{"title":60,"description":46,"pubDate":69,"author":17,"tags":70,"image":22},["Date","2025-01-25T00:00:00.000Z"],[49,50,51,52],"src/content/blog/de/new-blog.mdx","de/new-blog.mdx","de/future-web-development",{"id":73,"data":75,"body":23,"filePath":78,"digest":25,"legacyId":79,"deferredRender":27},{"title":14,"description":15,"pubDate":76,"author":17,"tags":77,"image":22},["Date","2025-01-20T00:00:00.000Z"],[19,20,21],"src/content/blog/de/future-web-development.mdx","de/future-web-development.mdx","de/react-best-practices-2025",{"id":80,"data":82,"body":53,"filePath":85,"digest":55,"legacyId":86,"deferredRender":27},{"title":45,"description":46,"pubDate":83,"author":17,"tags":84,"image":22},["Date","2025-01-25T00:00:00.000Z"],[49,50,51,52],"src/content/blog/de/react-best-practices-2025.mdx","de/react-best-practices-2025.mdx","de/welcome",{"id":87,"data":89,"body":38,"filePath":92,"digest":40,"legacyId":93,"deferredRender":27},{"title":31,"description":32,"pubDate":90,"author":17,"tags":91,"image":37},["Date","2025-01-15T00:00:00.000Z"],[35,36],"src/content/blog/de/welcome.mdx","de/welcome.mdx","en/new-blog",{"id":94,"data":96,"body":104,"filePath":105,"digest":106,"legacyId":107,"deferredRender":27},{"title":97,"description":98,"pubDate":99,"author":17,"tags":100,"image":22},"Getting Started with Astro","Learn how to build modern websites with Astro, the web framework for content-driven websites.",["Date","2025-01-30T00:00:00.000Z"],[101,102,103],"Astro","Web Development","Static Sites","# Getting Started with Astro\n\nAstro is revolutionizing how we build modern websites. This guide will help you get started with Astro and understand why it's becoming so popular.\n\n## What is Astro?\n\nAstro is a web framework designed for building fast, content-focused websites. It allows you to use your favorite UI components and libraries while shipping zero JavaScript by default.\n\n## Key Features\n\n### 1. Component Islands\n\nAstro introduces the concept of \"component islands\" - interactive components surrounded by static HTML.\n\n```astro\n---\n// Static content\n---\n\u003Chtml>\n  \u003Cbody>\n    \u003Ch1>Hello World\u003C/h1>\n    \u003C!-- Interactive island -->\n    \u003CCounter client:load />\n  \u003C/body>\n\u003C/html>\n```\n\n### 2. Multi-Framework Support\n\nUse React, Vue, Svelte, or even plain HTML components in the same project.\n\n### 3. Built-in Optimization\n\nAstro automatically optimizes your build, splitting CSS and JavaScript only where needed.\n\n## Why Choose Astro?\n\n- **Performance**: Fast loading times with minimal JavaScript\n- **Developer Experience**: Use familiar frameworks and tools\n- **SEO-Friendly**: Server-side rendering by default\n- **Scalable**: From small blogs to large applications\n\n## Getting Started\n\n```bash\n# Create a new Astro project\nnpm create astro@latest my-astro-site\n\n# Start development server\nnpm run dev\n```\n\n## Conclusion\n\nAstro offers a fresh approach to web development that prioritizes performance and developer experience. Whether you're building a blog, documentation site, or complex web application, Astro provides the tools you need.\n\n---\n\n_Ready to build with Astro? [Contact us for your next project!](/contact)_","src/content/blog/en/new-blog.mdx","86908a721cffb0a3","en/new-blog.mdx","en/future-web-development",{"id":108,"data":110,"body":116,"filePath":117,"digest":118,"legacyId":119,"deferredRender":27},{"title":111,"description":112,"pubDate":113,"author":17,"tags":114,"image":22},"The Future of Web Development","A look at the latest trends and technologies in web development.",["Date","2025-01-20T00:00:00.000Z"],[102,20,115],"Technology","# The Future of Web Development\n\nWeb development is evolving rapidly. Here are some trends we expect for 2025 and beyond.\n\n## React Server Components\n\nServer Components are revolutionizing how we build React applications. They enable server-side rendering of components and send only necessary data to the client.\n\n```jsx\n// Example of Server Components\nexport default function BlogPost({ post }) {\n\treturn (\n\t\t\u003Carticle>\n\t\t\t\u003Ch1>{post.title}\u003C/h1>\n\t\t\t\u003Cp>{post.content}\u003C/p>\n\t\t\u003C/article>\n\t);\n}\n```\n\n## Edge Computing\n\nEdge Computing brings data processing closer to the user. This means faster loading times and better performance for global applications.\n\n## AI-Powered Development\n\nArtificial Intelligence will simplify and accelerate development. From code generation to automated testing - AI will become an indispensable partner for developers.\n\n## Our Approach\n\nAt Nexor Software, we stay at the forefront of technology and integrate the latest innovations into our projects to provide our clients with the best solutions.\n\n---\n\n_Interested in collaboration? [Let's talk!](/contact)_","src/content/blog/en/future-web-development.mdx","54c5180285ea2ba9","en/future-web-development.mdx","en/welcome",{"id":120,"data":122,"body":129,"filePath":130,"digest":131,"legacyId":132,"deferredRender":27},{"title":123,"description":124,"pubDate":125,"author":17,"tags":126,"image":37},"Welcome to Nexor Software","Learn more about our mission and vision for innovative software solutions.",["Date","2025-01-15T00:00:00.000Z"],[127,128],"Introduction","Company","# Welcome to Nexor Software\n\nWelcome to our new blog! Here we regularly share updates on our latest projects, technologies, and insights into the world of software development.\n\n## Our Mission\n\nAt Nexor Software, we believe that every business should have access to innovative software solutions that drive growth and efficiency.\n\n## What to Expect\n\n- **Project Updates**: Insights into our current developments\n- **Technology Trends**: The latest developments in the software industry\n- **Best Practices**: Tips and tricks for successful software projects\n- **Team Insights**: Behind the scenes at Nexor Software\n\nStay tuned for exciting content!\n\n---\n\n_Have questions or suggestions? Feel free to contact us through our [contact form](/contact)._","src/content/blog/en/welcome.mdx","b2fe249b00d8f021","en/welcome.mdx","en/react-best-practices-2025",{"id":133,"data":135,"body":139,"filePath":140,"digest":141,"legacyId":142,"deferredRender":27},{"title":45,"description":136,"pubDate":137,"author":17,"tags":138,"image":22},"Modern development patterns and best practices for React applications.",["Date","2025-01-25T00:00:00.000Z"],[49,50,51,52],"# React Best Practices 2025\n\nReact has evolved tremendously in recent years. Here are the most important best practices for 2025.\n\n## Using Hooks Correctly\n\nHooks have revolutionized how we write React components. But there are some important rules to follow:\n\n### 1. Use Hooks only at the top level\n\n```jsx\n// ✅ Correct\nfunction MyComponent() {\n\tconst [count, setCount] = useState(0);\n\t// ...\n}\n\n// ❌ Wrong\nfunction MyComponent() {\n\tif (condition) {\n\t\tconst [count, setCount] = useState(0);\n\t}\n}\n```\n\n### 2. Custom Hooks for reusable logic\n\n```jsx\nfunction useLocalStorage(key, initialValue) {\n\tconst [storedValue, setStoredValue] = useState(() => {\n\t\ttry {\n\t\t\treturn JSON.parse(localStorage.getItem(key)) || initialValue;\n\t\t} catch {\n\t\t\treturn initialValue;\n\t\t}\n\t});\n\n\tconst setValue = (value) => {\n\t\tsetStoredValue(value);\n\t\tlocalStorage.setItem(key, JSON.stringify(value));\n\t};\n\n\treturn [storedValue, setValue];\n}\n```\n\n## Performance Optimization\n\n### React.memo for expensive components\n\n```jsx\nconst ExpensiveComponent = React.memo(({ data }) => {\n\treturn (\n\t\t\u003Cdiv>\n\t\t\t{data.map((item) => (\n\t\t\t\t\u003CHeavyCalculation key={item.id} item={item} />\n\t\t\t))}\n\t\t\u003C/div>\n\t);\n});\n```\n\n### Using useMemo and useCallback correctly\n\n```jsx\nconst memoizedValue = useMemo(() => {\n\treturn expensiveCalculation(a, b);\n}, [a, b]);\n\nconst memoizedCallback = useCallback(() => {\n\tdoSomething(a, b);\n}, [a, b]);\n```\n\n## Testing\n\nUnit tests are more important than ever. Use React Testing Library for component-based tests:\n\n```jsx\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport Counter from './Counter';\n\ntest('increments counter', () => {\n\trender(\u003CCounter />);\n\tconst button = screen.getByText('Increment');\n\tfireEvent.click(button);\n\texpect(screen.getByText('Count: 1')).toBeInTheDocument();\n});\n```\n\n## Conclusion\n\nThese best practices will help you develop maintainable, performant, and scalable React applications. Stay curious and experiment with new features!\n\n---\n\n_Have questions about React or need help with your next project? [Contact us!](/contact)_","src/content/blog/en/react-best-practices-2025.mdx","b34b27f8037469d9","en/react-best-practices-2025.mdx"]